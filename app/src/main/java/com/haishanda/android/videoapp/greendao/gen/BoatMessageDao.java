package com.haishanda.android.videoapp.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.haishanda.android.videoapp.Bean.BoatMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOAT_MESSAGE".
*/
public class BoatMessageDao extends AbstractDao<BoatMessage, Void> {

    public static final String TABLENAME = "BOAT_MESSAGE";

    /**
     * Properties of entity BoatMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MachineId = new Property(0, int.class, "machineId", false, "MACHINE_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property CameraId = new Property(2, int.class, "cameraId", false, "CAMERA_ID");
        public final static Property CameraImagePath = new Property(3, String.class, "cameraImagePath", false, "CAMERA_IMAGE_PATH");
        public final static Property AddTime = new Property(4, String.class, "addTime", false, "ADD_TIME");
        public final static Property UpdateTime = new Property(5, String.class, "updateTime", false, "UPDATE_TIME");
    }


    public BoatMessageDao(DaoConfig config) {
        super(config);
    }
    
    public BoatMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOAT_MESSAGE\" (" + //
                "\"MACHINE_ID\" INTEGER NOT NULL ," + // 0: machineId
                "\"NAME\" TEXT," + // 1: name
                "\"CAMERA_ID\" INTEGER NOT NULL ," + // 2: cameraId
                "\"CAMERA_IMAGE_PATH\" TEXT," + // 3: cameraImagePath
                "\"ADD_TIME\" TEXT," + // 4: addTime
                "\"UPDATE_TIME\" TEXT);"); // 5: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOAT_MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BoatMessage entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getMachineId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getCameraId());
 
        String cameraImagePath = entity.getCameraImagePath();
        if (cameraImagePath != null) {
            stmt.bindString(4, cameraImagePath);
        }
 
        String addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindString(5, addTime);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(6, updateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BoatMessage entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getMachineId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getCameraId());
 
        String cameraImagePath = entity.getCameraImagePath();
        if (cameraImagePath != null) {
            stmt.bindString(4, cameraImagePath);
        }
 
        String addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindString(5, addTime);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(6, updateTime);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public BoatMessage readEntity(Cursor cursor, int offset) {
        BoatMessage entity = new BoatMessage( //
            cursor.getInt(offset + 0), // machineId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // cameraId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cameraImagePath
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // addTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // updateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BoatMessage entity, int offset) {
        entity.setMachineId(cursor.getInt(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCameraId(cursor.getInt(offset + 2));
        entity.setCameraImagePath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUpdateTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(BoatMessage entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(BoatMessage entity) {
        return null;
    }

    @Override
    public boolean hasKey(BoatMessage entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
