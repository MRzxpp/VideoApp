package com.haishanda.android.videoapp.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.haishanda.android.videoapp.Bean.MonitorWarningBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MONITOR_WARNING_BEAN".
*/
public class MonitorWarningBeanDao extends AbstractDao<MonitorWarningBean, Long> {

    public static final String TABLENAME = "MONITOR_WARNING_BEAN";

    /**
     * Properties of entity MonitorWarningBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property IsNotificationOpen = new Property(1, boolean.class, "isNotificationOpen", false, "IS_NOTIFICATION_OPEN");
        public final static Property IsVoiceOpen = new Property(2, boolean.class, "isVoiceOpen", false, "IS_VOICE_OPEN");
        public final static Property IsShakeOpen = new Property(3, boolean.class, "isShakeOpen", false, "IS_SHAKE_OPEN");
        public final static Property IsSendingEmail = new Property(4, boolean.class, "isSendingEmail", false, "IS_SENDING_EMAIL");
    }


    public MonitorWarningBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MonitorWarningBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MONITOR_WARNING_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"IS_NOTIFICATION_OPEN\" INTEGER NOT NULL ," + // 1: isNotificationOpen
                "\"IS_VOICE_OPEN\" INTEGER NOT NULL ," + // 2: isVoiceOpen
                "\"IS_SHAKE_OPEN\" INTEGER NOT NULL ," + // 3: isShakeOpen
                "\"IS_SENDING_EMAIL\" INTEGER NOT NULL );"); // 4: isSendingEmail
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MONITOR_WARNING_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MonitorWarningBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getIsNotificationOpen() ? 1L: 0L);
        stmt.bindLong(3, entity.getIsVoiceOpen() ? 1L: 0L);
        stmt.bindLong(4, entity.getIsShakeOpen() ? 1L: 0L);
        stmt.bindLong(5, entity.getIsSendingEmail() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MonitorWarningBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getIsNotificationOpen() ? 1L: 0L);
        stmt.bindLong(3, entity.getIsVoiceOpen() ? 1L: 0L);
        stmt.bindLong(4, entity.getIsShakeOpen() ? 1L: 0L);
        stmt.bindLong(5, entity.getIsSendingEmail() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public MonitorWarningBean readEntity(Cursor cursor, int offset) {
        MonitorWarningBean entity = new MonitorWarningBean( //
            cursor.getLong(offset + 0), // id
            cursor.getShort(offset + 1) != 0, // isNotificationOpen
            cursor.getShort(offset + 2) != 0, // isVoiceOpen
            cursor.getShort(offset + 3) != 0, // isShakeOpen
            cursor.getShort(offset + 4) != 0 // isSendingEmail
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MonitorWarningBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setIsNotificationOpen(cursor.getShort(offset + 1) != 0);
        entity.setIsVoiceOpen(cursor.getShort(offset + 2) != 0);
        entity.setIsShakeOpen(cursor.getShort(offset + 3) != 0);
        entity.setIsSendingEmail(cursor.getShort(offset + 4) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MonitorWarningBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MonitorWarningBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MonitorWarningBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
