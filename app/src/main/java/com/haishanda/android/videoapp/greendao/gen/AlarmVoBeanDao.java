package com.haishanda.android.videoapp.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.haishanda.android.videoapp.Bean.AlarmVoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALARM_VO_BEAN".
*/
public class AlarmVoBeanDao extends AbstractDao<AlarmVoBean, Long> {

    public static final String TABLENAME = "ALARM_VO_BEAN";

    /**
     * Properties of entity AlarmVoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property MachineName = new Property(1, String.class, "machineName", false, "MACHINE_NAME");
        public final static Property Urls = new Property(2, String.class, "urls", false, "URLS");
        public final static Property AlarmTime = new Property(3, java.util.Date.class, "alarmTime", false, "ALARM_TIME");
    }


    public AlarmVoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AlarmVoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALARM_VO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL UNIQUE ," + // 0: id
                "\"MACHINE_NAME\" TEXT," + // 1: machineName
                "\"URLS\" TEXT," + // 2: urls
                "\"ALARM_TIME\" INTEGER);"); // 3: alarmTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALARM_VO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AlarmVoBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String machineName = entity.getMachineName();
        if (machineName != null) {
            stmt.bindString(2, machineName);
        }
 
        String urls = entity.getUrls();
        if (urls != null) {
            stmt.bindString(3, urls);
        }
 
        java.util.Date alarmTime = entity.getAlarmTime();
        if (alarmTime != null) {
            stmt.bindLong(4, alarmTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AlarmVoBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String machineName = entity.getMachineName();
        if (machineName != null) {
            stmt.bindString(2, machineName);
        }
 
        String urls = entity.getUrls();
        if (urls != null) {
            stmt.bindString(3, urls);
        }
 
        java.util.Date alarmTime = entity.getAlarmTime();
        if (alarmTime != null) {
            stmt.bindLong(4, alarmTime.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public AlarmVoBean readEntity(Cursor cursor, int offset) {
        AlarmVoBean entity = new AlarmVoBean( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // machineName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // urls
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)) // alarmTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AlarmVoBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setMachineName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUrls(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAlarmTime(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AlarmVoBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AlarmVoBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AlarmVoBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
