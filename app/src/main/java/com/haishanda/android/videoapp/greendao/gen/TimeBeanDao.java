package com.haishanda.android.videoapp.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.haishanda.android.videoapp.Bean.TimeBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TIME_BEAN".
*/
public class TimeBeanDao extends AbstractDao<TimeBean, Long> {

    public static final String TABLENAME = "TIME_BEAN";

    /**
     * Properties of entity TimeBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BeginHour = new Property(0, int.class, "beginHour", false, "BEGIN_HOUR");
        public final static Property BeginMinute = new Property(1, int.class, "beginMinute", false, "BEGIN_MINUTE");
        public final static Property EndHour = new Property(2, int.class, "endHour", false, "END_HOUR");
        public final static Property EndMinute = new Property(3, int.class, "endMinute", false, "END_MINUTE");
        public final static Property MachineId = new Property(4, long.class, "machineId", true, "_id");
    }


    public TimeBeanDao(DaoConfig config) {
        super(config);
    }
    
    public TimeBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TIME_BEAN\" (" + //
                "\"BEGIN_HOUR\" INTEGER NOT NULL ," + // 0: beginHour
                "\"BEGIN_MINUTE\" INTEGER NOT NULL ," + // 1: beginMinute
                "\"END_HOUR\" INTEGER NOT NULL ," + // 2: endHour
                "\"END_MINUTE\" INTEGER NOT NULL ," + // 3: endMinute
                "\"_id\" INTEGER PRIMARY KEY NOT NULL );"); // 4: machineId
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_TIME_BEAN__id ON TIME_BEAN" +
                " (\"_id\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TIME_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TimeBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getBeginHour());
        stmt.bindLong(2, entity.getBeginMinute());
        stmt.bindLong(3, entity.getEndHour());
        stmt.bindLong(4, entity.getEndMinute());
        stmt.bindLong(5, entity.getMachineId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TimeBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getBeginHour());
        stmt.bindLong(2, entity.getBeginMinute());
        stmt.bindLong(3, entity.getEndHour());
        stmt.bindLong(4, entity.getEndMinute());
        stmt.bindLong(5, entity.getMachineId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 4);
    }    

    @Override
    public TimeBean readEntity(Cursor cursor, int offset) {
        TimeBean entity = new TimeBean( //
            cursor.getInt(offset + 0), // beginHour
            cursor.getInt(offset + 1), // beginMinute
            cursor.getInt(offset + 2), // endHour
            cursor.getInt(offset + 3), // endMinute
            cursor.getLong(offset + 4) // machineId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TimeBean entity, int offset) {
        entity.setBeginHour(cursor.getInt(offset + 0));
        entity.setBeginMinute(cursor.getInt(offset + 1));
        entity.setEndHour(cursor.getInt(offset + 2));
        entity.setEndMinute(cursor.getInt(offset + 3));
        entity.setMachineId(cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TimeBean entity, long rowId) {
        entity.setMachineId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TimeBean entity) {
        if(entity != null) {
            return entity.getMachineId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TimeBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
